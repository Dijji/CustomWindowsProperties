<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AggregationType" xml:space="preserve">
    <value>&lt;p&gt;Specifies how aggregate properties are displayed when multiple values are selected. Default is "Default".&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;
Default	&lt;/td&gt;&lt;td&gt;Displays a Multiple Values placeholder in the UI. This is the default if the type is incompatible with the specified aggregationType.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
First&lt;/td&gt;&lt;td&gt;	Displays the property value of the first item in the selection or collection.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Sum&lt;/td&gt;&lt;td&gt;	Displays the sum of the numerical values. Useful for properties such as System.Media.Duration or System.Size. This value is not compatible with non-numeric types.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Average&lt;/td&gt;&lt;td&gt;	Displays the average of the numerical values. Useful for properties such as System.Rating. This value is not compatible with non-numeric types.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
DateRange&lt;/td&gt;&lt;td&gt;	Displays a range of dates. Useful for properties like System.Photo.DateTaken. This value is not compatible with anything except type="DateTime" and is the default for properties of that type.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Union&lt;/td&gt;&lt;td&gt;	Displays a union of all the values in the selection or collection. The order in which the values are shown is undefined. This value is the default for properties of type="String" and multipleValues="true".
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Maximum	&lt;/td&gt;&lt;td&gt;Displays the maximum value in the collection. Useful for properties like System.DateModified. Not compatible with non-numeric or non-date types.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Minimum&lt;/td&gt;&lt;td&gt;	Displays the minimum value in the collection. Not compatible with non-numeric or non-date types.
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="Alignment" xml:space="preserve">
    <value>Specifies the alignment to use. The default is "Left".</value>
  </data>
  <data name="BooleanFormat" xml:space="preserve">
    <value>Specifies which pair of strings should be used to format a Boolean value. The default is "YesNo", i.e. "Yes" for true and "No" for false.</value>
  </data>
  <data name="CanBePurged" xml:space="preserve">
    <value>When set to "true", allows an innate property to be deleted. Innate properties, which are calculated from other properties, are read-only by definition. The available and default values for this attribute depends on the IsInnate value. If IsInnate is "true ", then CanBePurged defaults to "false", but may be set to "true". If IsInnate is "false", then CanBePurged must be "true".</value>
  </data>
  <data name="CanonicalName" xml:space="preserve">
    <value>The case-sensitive name of a property as it is known to the system, regardless of its localized name.

Canonical names consist of any number of tokens, separated by dots, for example:

Name1.NameB.Name7.Basil

Each token in the name must begin with a capital letter, and otherwise consist of upper case and lower case letters, or numbers.</value>
  </data>
  <data name="ColumnIndexType" xml:space="preserve">
    <value>&lt;p&gt;To optimize sorting and grouping, the Windows search engine can create secondary indexes for properties that have isColumn="true" and is only useful in such cases.  If the property tends to be sorted frequently by users, this attribute should be specified. The default value is "OnDemand".&lt;/p&gt;
&lt;p&gt;The following values are valid. &lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;
NotIndexed:&lt;/td&gt;&lt;td&gt; Never build a value index. 
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
OnDisk: &lt;/td&gt;&lt;td&gt;Build a value index by default for this property.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
InMemory: &lt;/td&gt;&lt;td&gt;Obsolete. Do not use.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
OnDiskAll: &lt;/td&gt;&lt;td&gt;Build a value index by default for this property, and if it is a vector property, also a value index for all concatenated vector values. 
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
OnDiskVector: &lt;/td&gt;&lt;td&gt;Build a value index by default for the concatenated vector values. &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
OnDemand: &lt;/td&gt;&lt;td&gt;Only build a value index on demand, that is, the first time it is needed for a query.
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="ConditionOperation" xml:space="preserve">
    <value>&lt;p&gt;Specifies a hint to the Search Query Builder tool so that it can determine the default operator. The default is "Equal". The possible values are as follows:&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;
Equal	 &lt;/td&gt;&lt;td&gt; Indicates equivalent.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
NotEqual	&lt;/td&gt;&lt;td&gt;Indicates not equivalent.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
LessThan&lt;/td&gt;&lt;td&gt;	Indicates less than.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
GreaterThan	&lt;/td&gt;&lt;td&gt;Default for properties of ConditionType="Size". Indicates greater than.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Contains&lt;/td&gt;&lt;td&gt;	Default for properties of ConditionType="String". Indicates inclusion.
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="ConditionType" xml:space="preserve">
    <value>&lt;p&gt;Specifies a hint to the Search Query Builder UI so that it can determine the list of possible condition operators inside a predicate. The following are recognized values. The default is "String".&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;&lt;td&gt;The following operators will be used: "is", "is not", "&lt;", "&gt;", "&lt;=", "=""&gt;=", "starts with", "ends with", "contains", "doesn't contain", "is like".
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt; Number&lt;/td&gt;&lt;td&gt;Default for numeric properties. The following operators will be used: "equals", "doesn't equal", "is less than", "is greater than", "is less than or equal to", "is greater than or equal to".
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt; DateTime &lt;/td&gt;&lt;td&gt;Default for properties of type="DateTime". The following operators will be used: "is", "is not", "is before", "is after", "is before but includes", "is after but includes".
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt; Boolean &lt;/td&gt;&lt;td&gt;Default for properties of type="Boolean". Same as Number.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;Size&lt;/td&gt;&lt;td&gt;Same as Number.
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="DateTimeFormat" xml:space="preserve">
    <value>&lt;p&gt; Specifies how a date-time value should be formatted. The default is "General". The following values are valid:&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;
General	&lt;/td&gt;&lt;td&gt;Default. Formats the date-time value using the shell date-time format. [Use the formatTimeAs and formatDateAs attributes to specify how the time and date are formatted.] Currently, this tool will always format the time as ShortTime e.g. "7:48 PM" and the date as ShortDate e.g. "5/13/59". Requires the property type to be DateTime.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Month&lt;/td&gt;&lt;td&gt;	Formats the value as one of the months of the year. Requires the property type to be Int32. The value must be stored as a numeric value with 1 representing the first month of the year.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
YearMonth&lt;/td&gt;&lt;td&gt;	Formats the value as "Year - Month". Requires the property type to be Int32. The value must be stored such that the two highest bytes specify the year and the lower two bytes specify the month.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Year	&lt;/td&gt;&lt;td&gt;Formats the value as a simple string.
 
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="DefaultColumnWidth" xml:space="preserve">
    <value>The default is '20'</value>
  </data>
  <data name="DefaultSortDirection" xml:space="preserve">
    <value>Specifies the sort direction. The default is "Ascending".</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>The display name of the property as it is displayed in the UI (for example, the details column label or preview panel).</value>
  </data>
  <data name="DisplayType" xml:space="preserve">
    <value>&lt;p&gt;Default is &amp;quot;String&amp;quot;. Specifies the type of the display string. The following are valid types. &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Default. Value is displayed as a string. Use &amp;quot;StringFormat&amp;quot; to format. &lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;Default for numeric properties. Value is displayed as a number. Use &amp;quot;NumberFormat&amp;quot; to format. &lt;/td&gt;
&lt;/tr&gt;&lt;tr class="odd"&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Default if Type is Boolean. Value is displayed as a boolean. Use &amp;quot;BooleanFormat&amp;quot; to format. &lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;DateTime&lt;/td&gt;
&lt;td&gt;Default if Type is DateTime. Value is displayed as a date or time. Use &amp;quot;DateTimeFormat&amp;quot; to format.
If Duration is chosen, this tool will currently always specify hh:mm:ss as its format &lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;Enumerated&lt;/td&gt;
&lt;td&gt;Value is displayed as a display string mapping provided by the &amp;quot;EnumeratedList&amp;quot; property
 &lt;b&gt; Not currently supported by this tool &lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</value>
  </data>
  <data name="EditControl" xml:space="preserve">
    <value>&lt;p&gt;Specifies what control to use when editing the property. The default is "Default". The following are valid values.&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;
Default	&lt;/td&gt;&lt;td&gt; Uses the default control, based upon the Type. String with MultipleValues uses the "MultiValueText" control. DateTime uses the "Calendar" control. Any other type results in using the "Text" control.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Calendar	&lt;/td&gt;&lt;td&gt;Uses the calendar control.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
CheckboxDropList	&lt;/td&gt;&lt;td&gt;Uses the list control with checkboxes.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
DropList&lt;/td&gt;&lt;td&gt;	Uses the dropdown list control.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
MultiLineText&lt;/td&gt;&lt;td&gt;	Uses the multi-line text edit control.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
MultiValueText	&lt;/td&gt;&lt;td&gt;Uses the multi-value text edit control.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Rating&lt;/td&gt;&lt;td&gt;	Uses the 5-star rating control.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Text&lt;/td&gt;&lt;td&gt;	Uses the text edit control.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
IconList&lt;/td&gt;&lt;td&gt; Windows 7 or later. That is all the documentation says. We can speculate that the property editor is asked to select from a number of icons. 
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="EditInvitation" xml:space="preserve">
    <value>The Help string text that is displayed as an instruction to the user for the control or ToolTip (for instance, "Enter author name.").</value>
  </data>
  <data name="GroupingRange" xml:space="preserve">
    <value>&lt;p&gt;Specifies how this property is displayed when a view is grouped by this property. The default is "Discrete".&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;
Discrete	&lt;/td&gt;&lt;td&gt;Default. Displays individual values.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Alphanumeric &lt;/td&gt;&lt;td&gt;Displays static alphanumeric ranges for values.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Size&lt;/td&gt;&lt;td&gt;	Displays static size ranges for values.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Date	&lt;/td&gt;&lt;td&gt;Displays month/year groups. Default for properties of type="DateTime".
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
TimeRelative&lt;/td&gt;&lt;td&gt; Displays in time-relative groups.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Dynamic	&lt;/td&gt;&lt;td&gt;Displays dynamically created ranges for the values.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Percent	&lt;/td&gt;&lt;td&gt;Displays percent buckets.
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="HideLabel" xml:space="preserve">
    <value>Indicates whether the label is hidden. The default is "false".</value>
  </data>
  <data name="InInvertedIndex" xml:space="preserve">
    <value>Indicates whether the property value should be stored in the inverted index. This lets end users perform full-text queries over the values of this property.
The default is "false".</value>
  </data>
  <data name="IsColumn" xml:space="preserve">
    <value>Indicates whether the property should also be stored in the Windows search database as a column, so that independent software vendors (ISVs) can create predicate-based queries (for example, "Select * Where "System.Title"='qqq'"). 
Set to "true" to enable end users (or developers) to create predicate based queries on the property. 
The default is "false".</value>
  </data>
  <data name="IsColumnSparse" xml:space="preserve">
    <value>The default is "true". If the property is multi-valued, this attribute is always "true".</value>
  </data>
  <data name="IsGroup" xml:space="preserve">
    <value>Specifies whether the property is a group heading. Default is "false". A group heading is strictly used to group properties within a list, has no value, and is never stored in a file. Some UI in the system use property lists to indicate the sequence of the properties to display. These property lists may include references to group headings (eg, System.PropGroup.Camera), which tell the UI to start a new group section (eg, "Camera Settings"). A property description with IsGroup="true" should specify a DisplayName to provide the text for the heading.</value>
  </data>
  <data name="IsInnate" xml:space="preserve">
    <value>Default is "false". Specifies whether the property is considered innate. An innate property is one which is either calculated from the content of a file, or from other resources or systems. For example, System.Size is an innate property provided by the file system; changing the value of the property in and of itself does nothing. Other examples are System.Image.Dimensions and System.Document.PageCount, which are calculated by programs based upon the content of the file, not based upon a user-changeable setting. Setting IsInnate="true" means the user cannot edit this property directly via a property control.</value>
  </data>
  <data name="IsTreeProperty" xml:space="preserve">
    <value>&lt;p&gt;Whether this is a tree property. The default is "false".&lt;/p&gt;&lt;p&gt; That is all the documentation has to say. We can speculate that it is something to do with how the property might be edited, but the exact meaning is most unclear. All we know for sure is that it was added in Windows 7.&lt;/p&gt;</value>
  </data>
  <data name="IsViewable" xml:space="preserve">
    <value>Specifies whether this property is intended to be viewable to the user. Default value is "false". For example, the Column Chooser UI only shows the properties that have IisViewable="true". The exception is UI that is driven by a property list, which will always show the property. If you have a property that is only meant to shuttle data between two objects, and never intended to be viewed by the user, this attribute should be false.</value>
  </data>
  <data name="MaxSize" xml:space="preserve">
    <value>The maximum size, in bytes, allowed for a certain property that is stored in the Windows search database.
The default is: 512 bytes 
Note that this maximum size is measured in bytes, not characters. The maximum number of characters depends on their encoding.</value>
  </data>
  <data name="Mnemonics" xml:space="preserve">
    <value>A list of mnemonic values that can be used to refer to the property in search queries.
The list is delimited with the '|' character.</value>
  </data>
  <data name="MultipleValues" xml:space="preserve">
    <value>Specifies whether this property can have multiple values. Default is "false".</value>
  </data>
  <data name="NumberFormat" xml:space="preserve">
    <value>&lt;p&gt;Specifies the display format. The default is "General". The following are valid values.&lt;/p&gt;
	&lt;table&gt;&lt;tr&gt;&lt;td&gt;
General	&lt;/td&gt;&lt;td&gt; Displays the value as an unformatted number.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Percentage&lt;/td&gt;&lt;td&gt;	Formats the value as a percentage. Requires the property to be UInt32.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
ByteSize&lt;/td&gt;&lt;td&gt;	Formats the value as a byte, "KB", "MB", or "GB" as appropriate. Requires the property to be UInt64.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
KBSize	&lt;/td&gt;&lt;td&gt;Formats the value as a "KB", no matter what the value is. Requires the property to be UInt64.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
SampleSize&lt;/td&gt;&lt;td&gt;	Formats the value as a number of bits. Requires the property to be UInt32.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
BitRate	&lt;/td&gt;&lt;td&gt;Formats the value in "Kbps". Requires the property to be UInt32. The value must be stored in "bits-per-second" units.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
SampleRate&lt;/td&gt;&lt;td&gt;	Formats the value in "KHz". Requires the property to be UInt32. The value must be stored in "Hertz" units.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
FrameRate&lt;/td&gt;&lt;td&gt;	Formats the value in frames/second. Requires the property to be UInt32. The value must be stored in "kilo-frames-per-second" units.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Pixels	&lt;/td&gt;&lt;td&gt;Formats the value in pixel units. Requires the property to be UInt32.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
DPI	&lt;/td&gt;&lt;td&gt;Formats the value in dots-per-inch. Requires the property to be UInt32.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Duration&lt;/td&gt;&lt;td&gt;	Formats the value as a duration. Use to specify the duration format. Requires the property to be UInt64.
At the moment, this tool will always use hh:mm:ss
 &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="RelativeDescriptionType" xml:space="preserve">
    <value />
  </data>
  <data name="SearchRawValue" xml:space="preserve">
    <value>&lt;p&gt;The default is "false".&lt;/p&gt;&lt;p&gt; That is all the documentation has to say. We can speculate that it may be an instruction to the Index Server that even if the property value has been indexed (say because InInvertedIndex is "True"), the original raw value should be searched as well. This might take a good deal of extra time for a long string value. &lt;/p&gt;</value>
  </data>
  <data name="SortDescription" xml:space="preserve">
    <value>&lt;p&gt;Specifies the strings offered as sort options. The following values provide the corresponding UI strings.&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;
General: &lt;/td&gt;&lt;td&gt;"Sort going up" / "Sort going down"
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
AToZ:&lt;/td&gt;&lt;td&gt; "A on top" / "Z on top"
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
LowestHighest:&lt;/td&gt;&lt;td&gt; "Lowest on top" / "Highest on top"
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
OldestNewest: &lt;/td&gt;&lt;td&gt;"Oldest on top" / "Newest on top"
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
SmallestLargest: &lt;/td&gt;&lt;td&gt;"Smallest on top" / "Largest on top"
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="StringFormat" xml:space="preserve">
    <value>Specifies how the property's value should be formatted as a string. The default is "General".</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>&lt;p&gt;Indicates the type of the property. The default is "Any".  The following are valid types &lt;/p&gt;
&lt;p&gt;Some of the options only make sense for programmatic access to the property, like Buffer, Stream, Blob, Clipboard or Object, and cannot be used directly in an editor.&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;
Any&lt;/td&gt;&lt;td&gt;	The  property system does not know anything about the type of the value, and you are strongly encouraged not to use this default.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Null	&lt;/td&gt;&lt;td&gt;There is and never can be any value for this property. 
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
String	&lt;/td&gt;&lt;td&gt;The value must be a  Unicode string terminated by a null character.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Boolean	&lt;/td&gt;&lt;td&gt;The value must be a boolean.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Byte&lt;/td&gt;&lt;td&gt;	The value must be a byte.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Buffer&lt;/td&gt;&lt;td&gt;	The value must be an array of bytes.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Int16	&lt;/td&gt;&lt;td&gt;The value must be a 16-bit integer.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
UInt16	&lt;/td&gt;&lt;td&gt;The value must be a 16-bit unsigned integer.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Int32&lt;/td&gt;&lt;td&gt;	The value must be a 32-bit integer.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
UInt32&lt;/td&gt;&lt;td&gt;	The value must be a 32-bit unsigned integer.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Int64	&lt;/td&gt;&lt;td&gt;The value must be a 64-bit integer.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
UInt64	&lt;/td&gt;&lt;td&gt;The value must be a 64-bit unsigned integer.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Double&lt;/td&gt;&lt;td&gt;	The value must be a double precision decimal.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
DateTime	&lt;/td&gt;&lt;td&gt;The value must be a shell datetime stamp, as used for files.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Guid&lt;/td&gt;&lt;td&gt;	The value must be a programmatically generated statistically unique identifier.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Blob&lt;/td&gt;&lt;td&gt;	The value must be a blob, which is a set of length-prefixed bytes.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Stream	&lt;/td&gt;&lt;td&gt;The value must be an object that implements IStream.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Clipboard	&lt;/td&gt;&lt;td&gt;The value must be a clipboard format used to hold copied values in flight.
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
Object	&lt;/td&gt;&lt;td&gt;The value must be an object that implements IUnknown.
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
</root>