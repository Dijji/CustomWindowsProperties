//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CustomWindowsProperties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class LocalizedHelp {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal LocalizedHelp() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CustomWindowsProperties.LocalizedHelp", typeof(LocalizedHelp).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The case-sensitive name of a property as it is known to the system, regardless of its localized name.
        ///
        ///Canonical names consist of any number of tokens, separated by dots, for example:
        ///
        ///Name1.NameB.Name7.Basil
        ///
        ///Each token in the name must begin with a capital letter, and otherwise consist of upper case and lower case letters, or numbers..
        /// </summary>
        internal static string CanonicalName {
            get {
                return ResourceManager.GetString("CanonicalName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To optimize sorting and grouping, the Windows search engine can create secondary indexes for properties that have isColumn=&quot;true&quot; and is only useful in such cases.  If the property tends to be sorted frequently by users, this attribute should be specified.  
        ///The default value is &quot;OnDemand&quot;.
        ///The following values are valid. 
        ///NotIndexed: Never build a value index. 
        ///OnDisk: Build a value index by default for this property.
        ///OnDiskAll: Build a value index by default for this property, and if it is a vector p [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ColumnIndexType {
            get {
                return ResourceManager.GetString("ColumnIndexType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates whether the property value should be stored in the inverted index. This lets end users perform full-text queries over the values of this property.
        ///The default is &quot;false&quot;..
        /// </summary>
        internal static string InInvertedIndex {
            get {
                return ResourceManager.GetString("InInvertedIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates whether the property should also be stored in the Windows search database as a column, so that independent software vendors (ISVs) can create predicate-based queries (for example, &quot;Select * Where &quot;System.Title&quot;=&apos;qqq&apos;&quot;). 
        ///Set to &quot;true&quot; to enable end users (or developers) to create predicate based queries on the property. 
        ///The default is &quot;false&quot;..
        /// </summary>
        internal static string IsColumn {
            get {
                return ResourceManager.GetString("IsColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default is &quot;true&quot;. If the property is multi-valued, this attribute is always &quot;true&quot;..
        /// </summary>
        internal static string IsColumnSparse {
            get {
                return ResourceManager.GetString("IsColumnSparse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum size, in bytes, allowed for a certain property that is stored in the Windows search database.
        ///The default is: 512 bytes 
        ///Note that this maximum size is measured in bytes, not characters. The maximum number of characters depends on their encoding..
        /// </summary>
        internal static string MaxSize {
            get {
                return ResourceManager.GetString("MaxSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A list of mnemonic values that can be used to refer to the property in search queries.
        ///The list is delimited with the &apos;|&apos; character..
        /// </summary>
        internal static string Mnemonics {
            get {
                return ResourceManager.GetString("Mnemonics", resourceCulture);
            }
        }
    }
}
